/**
 * RecursiveFibonacci.java - 
 *   A recursive program for computing the kth
 *   Fibonacci number.  The Fibonacci numbers
 *   are generated by starting with the numbers
 *   1 and 1, and then successively adding
 *   the two prevoius numbers in the sequence.
 *
 *   1, 1, 2, 3, 5, 8, 13, 21, ...
 *
 *   A recursive definition of the Fibonacci
 *   sequence is: 
 *
 *   fib(n) = 1                   if n <= 2
 *          = fib(n-1) + fib(n-2) if n < 2.
 *
 * @author Grant William Braught
 * @author Dickinson College
 * @version 1/10/2000
 *
 * Program modified slightly by Gregory M. Kapfhammer.
 */

public class RecursiveFibonacci 
{

    /**
     * Recursively calcualte the kth Fibonacci number.
     *
     * @param k indicates which Fibonacci number to compute.
     * @return the kth Fibonacci number.
     */
    public static int fib(int k) {

	// Base Case:
	//   If k <= 2 then fib(k) = 1.
	if (k <= 2) {
	    return 1;
	}
	// Recursive Case:
	//   If k > 2 then fib(k) = fib(k-1) + fib(k-2).
	else {
	    return fib(k-1) + fib(k-2);
	} 
    }

    /**
     * Recursively calculate the kth Fibonacci number using longs.
     *
     * @param k indicates which Fibonacci number to compute.
     * @return the kth Fibonacci number.
     */
    public static long fibLong(int k) {

	// Base Case:
	//   If k <= 2 then fib(k) = 1.
	if (k <= 2) 
	    {
		
		return 1;
	    
	    }

	// Recursive Case:
	//   If k > 2 then fib(k) = fib(k-1) + fib(k-2).
	else 
	    {

		long fibLongMinusOne = fibLong(k-1);
		long fibLongMinusTwo = fibLong(k-2);

		return fibLongMinusOne + fibLongMinusTwo;
	    
	    } 
    }
    
}

